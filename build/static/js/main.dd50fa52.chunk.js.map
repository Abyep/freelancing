{"version":3,"sources":["Api/index.js","Saga/index.js","App.js","serviceWorker.js","Reducer/index.js","index.js"],"names":["api","getData","Promise","resolve","reject","axios","defaults","headers","get","then","res","status","data","Error","catch","err","console","log","rootSaga","handleGetJobs","takeLatest","action","call","payload","put","type","error","App","props","handleCategory","event","setState","category","target","value","toLowerCase","handleSearch","searchInput","search","className","FormControl","TextField","variant","select","style","width","native","onChange","label","aria-label","state","categories","map","index","key","Capitalize","replace","placeholder","id","InputProps","startAdornment","InputAdornment","position","handleId","filteredData","this","dispatch","nextProps","nextState","length","str","charAt","toUpperCase","slice","filter","indexOf","Paper","user","src","avatar","first_name","last_name","email","FormControlLabel","control","Checkbox","checked","prevState","Component","connect","reducer","Boolean","window","location","hostname","match","initialState","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","store","createStore","applyMiddleware","logger","run","ReactDOM","render","fallback","path","exact","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.dd50fa52.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst api = {\n\n\n  getData() {\n    return new Promise((resolve, reject) => {\n      axios.defaults.headers = {\n        \"Content-Type\": \"application/json\",\n        // Authorization: `Token ${token}`,\n      };\n      axios\n        .get(`https://reqres.in/api/users?page=1`)\n        .then((res) => {\n          if (res.status == 200) {\n            resolve(res.data);\n          } else {\n            reject(new Error(\"error\"));\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  },\n\n  \n};\n\nexport default api;\n","import { put, call, takeLatest, take } from \"redux-saga/effects\";\r\nimport api from \"../Api/index.js\";\r\n\r\nexport const GET_DATA = \"GET_DATA\";\r\nexport const SAVE_DATA = \"SAVE_DATA\";\r\n\r\nexport const getData = (payload) => ({\r\n  type: \"GET_DATA\",\r\n  payload,\r\n});\r\n\r\n\r\n\r\nexport default function* rootSaga() {\r\n  yield takeLatest(\"GET_DATA\", handleGetJobs);\r\n}\r\n\r\nfunction* handleGetJobs(action) {\r\n  try {\r\n    const data = yield call(api.getData, action.payload);\r\n    yield put({\r\n      type: \"SAVE_DATA\",\r\n      data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: \"SAVE_DATA\",\r\n      error,\r\n    });\r\n  }\r\n}\r\n\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getData } from \"./Saga\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Paper, TextField } from \"@material-ui/core\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\n\nimport \"./App.css\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      filteredData: [],\n      category: \"\",\n      searchInput: \"\",\n      categories: [\"first_name\", \"last_name\", \"email\"],\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(getData());\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.data !== null) {\n      return { data: nextProps.data, filteredData: nextProps.data.data };\n    } else return null;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.data.length !== 0) {\n      return true;\n    }\n    return true;\n  }\n\n  handleCategory = (event) => {\n    this.setState({\n      category: event.target.value.toLowerCase(),\n    });\n  };\n\n  handleSearch = (event) => {\n    this.setState({\n      searchInput: event.target.value,\n    });\n  };\n\n  Capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  search = () => {\n    return (\n      <div className=\"searchDiv\">\n        <FormControl>\n          <TextField\n            variant=\"outlined\"\n            select\n            style={{ width: \"250px\" }}\n            native\n            onChange={this.handleCategory}\n            label=\"Select Category\"\n          >\n            <option aria-label=\"None\" value=\"\" />\n            {this.state.categories.map((category, index) => (\n              <option key={index} value={category}>\n                {this.Capitalize(category.replace(\"_\", \" \"))}\n              </option>\n            ))}\n          </TextField>\n        </FormControl>\n        <TextField\n          variant=\"outlined\"\n          value={this.state.searchInput}\n          placeholder=\"Search\"\n          id=\"standard-start-adornment\"\n          onChange={this.handleSearch}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            ),\n          }}\n        />\n      </div>\n    );\n  };\n\n  handleId = (id) => {\n    this.setState({\n      id: id,\n    });\n  };\n\n  render() {\n    console.log(this.state);\n    let filteredData = this.state.filteredData.slice();\n    if (this.state.searchInput !== \"\") {\n      filteredData = this.state.filteredData.filter((data) => {\n        return (\n          data[this.state.category]\n            .toLowerCase()\n            .indexOf(this.state.searchInput.toLowerCase()) !== -1\n        );\n      });\n    }\n\n    return (\n      <div>\n        <Paper className=\"paper\">\n          {this.search()}\n          <div className=\"parentDiv\">\n            {this.props.data &&\n              filteredData.map((user, index) => (\n                <div key={user.id} className=\"userDiv\">\n                  <img src={user.avatar} className=\"userIcon\" />\n                  <div className=\"userInfo\">\n                    <div>\n                      {user.first_name}+ +{user.last_name}\n                    </div>\n                    <div>{user.email}</div>\n                  </div>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        value={this.state.id}\n                        checked={this.state.id}\n                        onChange={() => this.handleId(user.id)}\n                      />\n                    }\n                  />\n                </div>\n              ))}\n          </div>\n        </Paper>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.reducer.data,\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SAVE_DATA } from \"../Saga/index\";\r\n\r\nconst initialState = {\r\ndata : null\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SAVE_DATA: {\r\n      return {\r\n        ...state,\r\n        data: action.data,\r\n\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React, { Suspense, lazy } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport rootSaga from \"./Saga\";\nimport reducer from \"./Reducer\";\nimport { Provider } from \"react-redux\";\nimport { logger } from \"redux-logger\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst rootReducer = combineReducers({\n  reducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware, logger));\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <Suspense fallback={<div></div>}>\n        <Switch>\n          <Route path=\"/\" exact component={App} />\n          <Route path=\"*\" component={App} />\n        </Switch>\n      </Suspense>\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}